# Tweaked version of the EKS cloud formation template.
#
# The original is split into three:
#
#  1 - one for creating a security group.
#
#  2 - one for creating a node IAM role and instance profile.
#
#  3 - one for creating and managing a pool of nodes in an autoscaling group.
#      The nodes in the autoscaling group will use a security group created
#      using the first script, and an IAM role and instance profile created
#      using the second script.
#
#  This is the third (3rd) script.
---
AWSTemplateFormatVersion: 2010-09-09
Description: Amazon EKS - Node Group

Parameters:

  NodeImageId:
    Description: AMI id for the node instances.
    Type: AWS::EC2::Image::Id

  NodeInstanceType:
    Description: EC2 instance type for the node instances
    Type: String
    Default: t3.medium
    ConstraintDescription: Must be a valid EC2 instance type

  NodeInstanceArch:
    Description: EC2 instance architecture
    Type: String
    Default: amd64
    AllowedValues:
      - amd64
      - arm64

  NodeGPUCount:
    Description: Number of GPUs per instance.
    Type: Number
    Default: 0

  NodeAutoScalingGroupMinSize:
    Description: Minimum size of the Node Group.
    Type: Number
    Default: 0

  NodeAutoScalingGroupMaxSize:
    Description: Maximum size of the Node Group.
    ConstraintDescription: |
        If equal to minimum size, then cluster
        autoscaler will be disabled for this group.
    Type: Number
    Default: 3

  NodeVolumeSize:
    Description: Node volume size (in GB)
    Type: Number
    Default: 20

  NodeVolumeType:
    Description: Storage type for node volume
    Type: String
    Default: gp2
    AllowedValues:
      - gp2
      - gp3

  OnDemandAllocationStrategy:
    Description: AllocationStrategy for On-Demand instances
    Type: String
    Default: prioritized
    AllowedValues:
      - prioritized
      - lowest-price

  SpotAllocationStrategy:
    Description: AllocationStrategy for Spot instances
    Type: String
    Default: lowest-price
    AllowedValues:
      - capacity-optimized
      - lowest-price

  OnDemandBaseCapacity:
    Description: On-Demand instance base capacity
    ConstraintDescription: |
      The minimum amount of the Auto Scaling group's capacity
      that must be fulfilled by On-Demand Instances.
    Type: Number
    Default: 0

  OnDemandPercentageAboveBaseCapacity:
    Description: Percentage of On-Demand instances
    ConstraintDescription: |
      Controls the percentages of On-Demand Instances and Spot Instances
      for your additional capacity beyond OnDemandBaseCapacity (for example,
      20 specifies 20% On-Demand Instances, 80% Spot Instances).
    Type: Number
    Default: 0

  SpotInstancePools:
    Description: |
      (For "lowest-price" spot allocation strategy) Number of Spot instance
      pools
    Type: Number
    Default: 2

  AlternateInstanceType0:
    Type: String
    Description: additional alternate instance type
    Default: ""

  AlternateInstanceType1:
    Type: String
    Description: additional alternate instance type
    Default: ""

  AlternateInstanceType2:
    Type: String
    Description: additional alternate instance type
    Default: ""

  AlternateInstanceType3:
    Type: String
    Description: additional alternate instance type
    Default: ""

  SpotMaxPrice:
    Description: Maximum price paid for Spot instances
    Type: String

  ClusterName:
    Description: The cluster name provided when the cluster was created.
    ConstraintDescription: |
      If it is incorrect, nodes will
      not be able to join the cluster.
    Type: String

  NodeGroupName:
    Description: Unique identifier for the Node Group.
    Type: String

  NodeInstanceProfile:
    Description: IAM profile for node instances.
    Type: String

  ASGAutoAssignPublicIp:
    Type: String
    Description: "auto assign public IP address for ASG instances"
    AllowedValues:
      - "yes"
      - "no"
    Default: "no"

  NodeSecurityGroup:
    Description: Security for the nodes in the cluster.
    Type: String

  Subnets:
    Description: The subnets where workers can be created.
    Type: List<AWS::EC2::Subnet::Id>

  UseSSHKey:
    Description: Whether the nodes should be launched with an SSH key set.
    Type: String
    Default: false
    AllowedValues:
      - true
      - false

  KeyName:
    Description: |
      The EC2 Key Pair to allow SSH access to the nodes (ignored if UseSSHKey ==
      false).

      Unfortunately, a key *must* be provided, even if UseSSHKey == false.  If
      you have no keys, create one using the EC2 dashboard.
    Type: "AWS::EC2::KeyPair::KeyName"

  CustomStartupPayload:
    Description: Base64-encoded script to run at instance startup
    Type: String
    AllowedPattern: "\
      ^([a-zA-Z0-9\\+/]{4})*\
      (\
        ([a-zA-Z0-9\\+/]{3}=)|\
        ([a-zA-Z0-9\\+/]{2}==)|\
        ([a-zA-Z0-9\\+/]===)\
      )?$"
    ConstraintDescription: Must be a valid base64-encoded string

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: EKS Cluster
        Parameters:
          - ClusterName

      - Label:
          default: Group Configuration
        Parameters:
          - NodeGroupName
          - NodeAutoScalingGroupMinSize
          - NodeAutoScalingGroupMaxSize

      - Label:
          default: Instance Configuration
        Parameters:
          - NodeInstanceType
          - NodeInstanceArch
          - NodeGPUCount
          - NodeInstanceProfile
          - NodeImageId
          - NodeVolumeSize
          - NodeVolumeType
          - UseSSHKey
          - KeyName
          - CustomStartupPayload

      - Label:
          default: Spot Allocation Configuration
        Parameters:
          - OnDemandAllocationStrategy
          - SpotAllocationStrategy
          - OnDemandBaseCapacity
          - OnDemandPercentageAboveBaseCapacity
          - SpotInstancePools
          - AlternateInstanceType0
          - AlternateInstanceType1
          - AlternateInstanceType2
          - AlternateInstanceType3
          - SpotMaxPrice

      - Label:
          default: Network Configuration
        Parameters:
          - NodeSecurityGroup
          - Subnets
          - ASGAutoAssignPublicIp

Conditions:
  DisableClusterAutoscaling:
    !Equals [!Ref NodeAutoScalingGroupMinSize, !Ref NodeAutoScalingGroupMaxSize]
  LowestPriceSpotAllocationStrategy:
    !Equals [!Ref SpotAllocationStrategy, "lowest-price"]
  NoGPU:
    !Equals [!Ref NodeGPUCount, 0]
  HasSSHKey:
    !Equals [!Ref UseSSHKey, "true"]
  IsASGAutoAssignPublicIp:
    !Equals [ !Ref ASGAutoAssignPublicIp , "yes" ]
  NoAlternateInstanceType0:
    !Equals [ !Ref AlternateInstanceType0 , "" ]
  NoAlternateInstanceType1:
    !Equals [ !Ref AlternateInstanceType1 , "" ]
  NoAlternateInstanceType2:
    !Equals [ !Ref AlternateInstanceType2 , "" ]
  NoAlternateInstanceType3:
    !Equals [ !Ref AlternateInstanceType3 , "" ]

Resources:
  NodeGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      DesiredCapacity: !Ref NodeAutoScalingGroupMinSize
      MinSize: !Ref NodeAutoScalingGroupMinSize
      MaxSize: !Ref NodeAutoScalingGroupMaxSize
      MixedInstancesPolicy:
        InstancesDistribution:
          OnDemandAllocationStrategy: !Ref OnDemandAllocationStrategy
          OnDemandBaseCapacity: !Ref OnDemandBaseCapacity
          OnDemandPercentageAboveBaseCapacity: !Ref OnDemandPercentageAboveBaseCapacity
          SpotAllocationStrategy: !Ref SpotAllocationStrategy
          SpotInstancePools:
            Fn::If:
              - LowestPriceSpotAllocationStrategy
              - !Ref SpotInstancePools
              - !Ref "AWS::NoValue"
          SpotMaxPrice: !Ref SpotMaxPrice
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref NodeLaunchTemplate
            Version: !GetAtt NodeLaunchTemplate.LatestVersionNumber
          Overrides:
            - InstanceType: !Ref NodeInstanceType
            - Fn::If:
              - NoAlternateInstanceType0
              - !Ref "AWS::NoValue"
              - InstanceType: !Ref AlternateInstanceType0
            - Fn::If:
              - NoAlternateInstanceType1
              - !Ref "AWS::NoValue"
              - InstanceType: !Ref AlternateInstanceType1
            - Fn::If:
              - NoAlternateInstanceType2
              - !Ref "AWS::NoValue"
              - InstanceType: !Ref AlternateInstanceType2
            - Fn::If:
              - NoAlternateInstanceType3
              - !Ref "AWS::NoValue"
              - InstanceType: !Ref AlternateInstanceType3

      VPCZoneIdentifier: !Ref Subnets
      Tags:
        - Key: Name
          Value: !Sub ${ClusterName}-${NodeGroupName}-Node
          PropagateAtLaunch: true
        - Key: !Sub kubernetes.io/cluster/${ClusterName}
          Value: owned
          PropagateAtLaunch: true
        - Key: eks:cluster-name
          Value: !Ref ClusterName
          PropagateAtLaunch: true
        - Key: eks:nodegroup-name
          Value: !Ref NodeGroupName
          PropagateAtLaunch: true
        - Key: k8s.io/cluster-autoscaler/enabled
          Value: !If [ DisableClusterAutoscaling, "false", "true" ]
          PropagateAtLaunch: true
        - Key: !Sub k8s.io/cluster-autoscaler/${ClusterName}
          Value: owned
          PropagateAtLaunch: true
        - Key: "\
            k8s.io/cluster-autoscaler/node-template/label\
            /spack.io/node-pool"
          Value: !Ref NodeGroupName
          PropagateAtLaunch: true
        - Key: "\
            k8s.io/cluster-autoscaler/node-template/label\
            /kubernetes.io/arch"
          Value: !Ref NodeInstanceArch
          PropagateAtLaunch: true
        - Key: "\
            k8s.io/cluster-autoscaler/node-template/resources\
            /spack.io/node-share"
          Value: 1Gi
          PropagateAtLaunch: true
        - Fn::If:
          - NoGPU
          - !Ref "AWS::NoValue"
          - Key: "\
              k8s.io/cluster-autoscaler/node-template/resources/nvidia.com/gpu"
            Value: !Ref NodeGPUCount
            PropagateAtLaunch: true
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: 1
        MinInstancesInService: !Ref NodeAutoScalingGroupMinSize
        PauseTime: PT5M

  LCH:
    Type: AWS::AutoScaling::LifecycleHook
    Properties:
      AutoScalingGroupName: !Ref NodeGroup
      HeartbeatTimeout: 60
      DefaultResult: CONTINUE
      LifecycleHookName: !Sub "${NodeGroupName}-LCH"
      LifecycleTransition: autoscaling:EC2_INSTANCE_TERMINATING

  NodeLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub "eksLaunchTemplate-${AWS::StackName}"
      LaunchTemplateData:
        IamInstanceProfile:
          Name: !Ref NodeInstanceProfile
        ImageId: !Ref NodeImageId
        InstanceType: !Ref NodeInstanceType

        KeyName:
          Fn::If:
            - HasSSHKey
            - !Ref KeyName
            - !Ref "AWS::NoValue"

        # NOTE(opadron): Since we specify a network interface with a security
        #                group below, we must *not* provide a security group at
        #                the LaunchTemplate level.
        #
        #                See: https://github.com/hashicorp/
        #                     terraform-provider-aws/issues
        #                     /4570#issuecomment-418083797
        #
        # SecurityGroups:
        # - !Ref NodeSecurityGroup

        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              VolumeSize: !Ref NodeVolumeSize
              VolumeType: !Ref NodeVolumeType
              DeleteOnTermination: true
        NetworkInterfaces:
          - DeviceIndex: 0
            AssociatePublicIpAddress:
              Fn::If:
                - IsASGAutoAssignPublicIp
                - true
                - false
            Groups:
              - !Ref NodeSecurityGroup
        UserData:
          # Custom code to convert cloudformation stack tags to kubernetes node
          # labels.  Since it's python, it should run on most architectures
          # w/out problems.  This runs on the instance as a systemd unit when
          # the instance starts up.
          Fn::Base64:
            !Sub |
              #!/bin/bash
              cat > script.py << EOF
              import json, sys
              tags = json.load(sys.stdin)
              tags = (tags.get("Stacks", []) + [{}])[0].get("Tags", [])
              print(",".join(
                  "{}={}".format(key[10:], value)
                  for key, value in (
                      (x.get("Key", ""), x.get("Value", ""))
                      for x in tags
                  )
                  if key.startswith("k8s-label/")))
              EOF

              # Set up user-level logging.
              # (From https://forums.aws.amazon.com/thread.jspa?threadID=149759)
              exec > >(tee /var/log/user-data.log|logger -t user-data ) 2>&1
              echo BEGIN "$( date '+%Y-%m-%d %H:%M:%S' )"
              set -o xtrace

              labels="$(
                  aws cloudformation describe-stacks \
                      --region ${AWS::Region} \
                      --stack-name ${AWS::StackName} | python3 script.py )"

              kubelet_extra_args=""

              instance_id=$(
                  curl -s http://169.254.169.254/latest/meta-data/instance-id )
              export AWS_DEFAULT_REGION=${AWS::Region}
              lifecycle_query='Reservations[0].Instances[0].InstanceLifecycle'
              instance_lifecycle="$( aws ec2 describe-instances \
                                         --instance-ids "$instance_id" \
                                         --query "$lifecycle_query" \
                                         --output text )"

              lifecycle_tag='OnDemand'
              if [ "$instance_lifecycle" '=' 'spot' ] ; then
                  lifecycle_tag='Ec2Spot'
                  spot_taint="spotInstance=true:PreferNoSchedule"
                  kubelet_extra_args="--register-with-taints=$spot_taint"
              fi

              sep=""
              if [ -n "$labels" ] ; then
                  sep=","
              fi

              labels="${!labels}${!sep}lifecycle=${!lifecycle_tag}"

              set +o xtrace
              payload="${CustomStartupPayload}"
              if [ -n "$payload" ] ; then
                  echo 'Executing custom startup payload'
                  payload="$( echo "$payload" | base64 -d )"
                  if [ "$?" '=' '0' ] ; then
                      eval $'set -o xtrace\n'"$payload"$'\nset +o xtrace'
                      echo 'Done executing custom startup payload'
                  else
                      echo 'Error: startup payload failed to decode' >&2
                  fi
              fi
              set -o xtrace

              /etc/eks/bootstrap.sh ${ClusterName} \
                  --kubelet-extra-args \
                      "--node-labels=$labels $kubelet_extra_args"

              /opt/aws/bin/cfn-signal --exit-code $? \
                       --stack  ${AWS::StackName} \
                       --resource NodeGroup  \
                       --region ${AWS::Region} || true

Outputs:

  NodeGroup:
    Description: The node autoscaling group
    Value: !Ref NodeGroup

  NodeLaunchTemplate:
    Description: The node autoscaling group launch template
    Value: !Ref NodeLaunchTemplate
